From: Jeffrey Feng <galago1992@gmail.com>
Subject: 
  Modify Cairo font engine in poppler to hint subpixel.
  Thanks to Yichao Zhou for his subpixel patch of previous poppler-0.43.
---
git diff --stat
 poppler/CairoFontEngine.cc |  4 ++--
 poppler/CairoOutputDev.cc  | 13 ++++++++++++-
 poppler/Gfx.cc             | 30 ++++++++++++++++++++++++++++++
 poppler/Gfx.h              |  3 +++
 poppler/Page.cc            | 12 ++++++++++++
 poppler/Page.h             |  3 +++
 6 files changed, 62 insertions(+), 3 deletions(-)

diff --git a/poppler/CairoFontEngine.cc b/poppler/CairoFontEngine.cc
index a65b5fc8..55475d31 100755
--- a/poppler/CairoFontEngine.cc
+++ b/poppler/CairoFontEngine.cc
@@ -117,7 +117,7 @@ double CairoFont::getSubstitutionCorrection(GfxFont *gfxFont)
                 cairo_matrix_t m;
                 cairo_matrix_init_identity(&m);
                 cairo_font_options_t *options = cairo_font_options_create();
-                cairo_font_options_set_hint_style(options, CAIRO_HINT_STYLE_NONE);
+                cairo_font_options_set_hint_style(options, CAIRO_HINT_STYLE_SLIGHT);
                 cairo_font_options_set_hint_metrics(options, CAIRO_HINT_METRICS_OFF);
                 cairo_scaled_font_t *scaled_font = cairo_scaled_font_create(cairo_font_face, &m, &m, options);
 
@@ -186,7 +186,7 @@ 
         }
     }
 
-    font_face.cairo_font_face = cairo_ft_font_face_create_for_ft_face(resource->face, FT_LOAD_NO_HINTING | FT_LOAD_NO_BITMAP);
+    font_face.cairo_font_face = cairo_ft_font_face_create_for_ft_face(resource->face, FT_LOAD_TARGET_LIGHT | FT_LOAD_NO_BITMAP);
     if (cairo_font_face_set_user_data(font_face.cairo_font_face, &ft_cairo_key, resource, _ft_done_face)) {
         cairo_font_face_destroy(font_face.cairo_font_face);
         _ft_done_face(resource);            return false;
diff --git a/poppler/CairoOutputDev.cc b/poppler/CairoOutputDev.cc
index aa68c6cd..3d273c98 100644
--- a/poppler/CairoOutputDev.cc
+++ b/poppler/CairoOutputDev.cc
@@ -153,7 +153,7 @@
     strokePathClip = nullptr;
     cairo = nullptr;
     currentFont = nullptr;
-    printing = true;
+    printing = false;
     use_show_text_glyphs = false;
     inUncoloredPattern = false;
     t3_render_state = Type3RenderNone;
@@ -1412,6 +1412,7 @@ void CairoOutputDev::drawChar(GfxState *state, double x, double y, double dx, do
 void CairoOutputDev::endString(GfxState *state)
 {
     int render;
+    cairo_operator_t prev_op = cairo_get_operator(cairo);
 
     if (!currentFont)
         return;
@@ -1429,6 +1430,15 @@ void CairoOutputDev::endString(GfxState *state)
         goto finish;
     }
 
+    // CAIRO_OPERATOR_DEST_OVER for subpixel purpose doesnot fit type3 font
+    if (state->getFont()->getType() == fontType3) {
+        cairo_font_options_t *font_options = cairo_font_options_create();
+        cairo_get_font_options(this->cairo, font_options);
+        if (cairo_font_options_get_antialias(font_options) == CAIRO_ANTIALIAS_SUBPIXEL) {
+            cairo_set_operator(cairo, CAIRO_OPERATOR_SOURCE);
+        }
+    }
+
     if (!(render & 1)) {
         LOG(printf("fill string\n"));
         cairo_set_source(cairo, fill_pattern);
@@ -1477,6 +1483,7 @@ void CairoOutputDev::endString(GfxState *state)
             cairo_new_path(cairo_shape);
         }
     }
+    cairo_set_operator(cairo, prev_op);
 
 finish:
     gfree(glyphs);
diff --git a/poppler/Gfx.cc b/poppler/Gfx.cc
index 0cd7875d..42672fa1 100644
--- a/poppler/Gfx.cc
+++ b/poppler/Gfx.cc
@@ -4590,6 +4590,36 @@ bool Gfx::checkTransparencyGroup(Dict *resDict)
     return transpGroup;
 }
 
+bool Gfx::checkNormalBlendModeOnly(Object *str) {
+    bool onlyNormalBlendMode = true;
+    int numArgs = 0;
+    Object argObj;
+    Parser myParser(xref, str, false);
+    Object obj = myParser.getObj();
+
+    while (!obj.isEOF()) {
+        if (obj.isCmd()) {
+            const char *cmd = obj.getCmd();
+            if (strcmp(cmd, "gs") == 0) {
+                Object obj1, obj2;
+                GfxBlendMode mode;
+                obj1 = res->lookupGState(argObj.getName());
+                if (!obj1.isNull() && !(obj2 = obj1.dictLookup("BM")).isNull()) {
+                    if (state->parseBlendMode(&obj2, &mode)) {
+                        onlyNormalBlendMode &= (mode == gfxBlendNormal);
+                    }
+                }
+            }
+            numArgs = 0;
+        } else if ((numArgs++) == 0) {
+            argObj = obj.copy();
+        }
+        obj = myParser.getObj();
+    }
+
+    return onlyNormalBlendMode;
+}
+
 void Gfx::doForm(Object *str)
 {
     Dict *dict;
diff --git a/poppler/Gfx.h b/poppler/Gfx.h
index 1e5955f5..512e2a4e 100644
--- a/poppler/Gfx.h
+++ b/poppler/Gfx.h
@@ -191,6 +191,9 @@ public:
 
     bool checkTransparencyGroup(Dict *resDict);
 
+    // Check whether a stream only contains normal blend mode (to enable subpixel rendering)
+    bool checkNormalBlendModeOnly(Object *str);
+
     void drawForm(Object *str, Dict *resDict, const double *matrix, const double *bbox, bool transpGroup = false, bool softMask = false, GfxColorSpace *blendingColorSpace = nullptr, bool isolated = false, bool knockout = false,
                   bool alpha = false, Function *transferFunc = nullptr, GfxColor *backdropColor = nullptr);
 
diff --git a/poppler/Page.cc b/poppler/Page.cc
index 7c16a131..1ee47690 100644
--- a/poppler/Page.cc
+++ b/poppler/Page.cc
@@ -344,6 +344,18 @@ Dict *Page::getResourceDictCopy(XRef *xrefA)
     return dict ? dict->copy(xrefA) : nullptr;
 }
 
+bool Page::suitSubpixelRendering(OutputDev *out) {
+    PDFRectangle box;
+    bool suited = false;
+    Object obj = contents.fetch(xref);
+
+    if (!obj.isNull()) {
+      Gfx gfx(doc, out, attrs->getResourceDict(), &box, NULL);
+      suited = gfx.checkNormalBlendModeOnly(&obj);
+    }
+    return suited;
+}
+
 void Page::replaceXRef(XRef *xrefA)
 {
     Dict *pageDict = pageObj.getDict()->copy(xrefA);
diff --git a/poppler/Page.h b/poppler/Page.h
index b0cc8a1c..5884fd53 100644
--- a/poppler/Page.h
+++ b/poppler/Page.h
@@ -177,6 +177,9 @@ public:
     Object *getResourceDictObject();
     Dict *getResourceDictCopy(XRef *xrefA);
 
+    // Whether the content in this page suits subpixel rendering (lcdfilter)
+    bool suitSubpixelRendering(OutputDev *out);
+
     // Get annotations array.
     Object getAnnotsObject(XRef *xrefA = nullptr) { return annotsObj.fetch(xrefA ? xrefA : xref); }
     // Add a new annotation to the page
